/* eslint-disable */
/* AUTO-GENERATED FILE. DO NOT EDIT MANUALLY. */
export type Maybe<T> = T;
export type InputMaybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
};

/** Autogenerated input type of BackdoorLogin */
export type BackdoorLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
};

/** Autogenerated return type of BackdoorLogin. */
export type BackdoorLoginPayload = {
  __typename: 'BackdoorLoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  user: User;
};

/** Autogenerated input type of CreatePractice */
export type CreatePracticeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  featureFlags?: InputMaybe<Array<Scalars['String']['input']>>;
  name: Scalars['String']['input'];
  proposalEditor?: InputMaybe<Scalars['String']['input']>;
  subscriptionStatus?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreatePractice. */
export type CreatePracticePayload = {
  __typename: 'CreatePracticePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  practice: Practice;
  principal: User;
  proposals: Array<Engagement>;
};

export type Engagement = {
  __typename: 'Engagement';
  id: Scalars['ID']['output'];
};

export type Mutation = {
  __typename: 'Mutation';
  /** Authenticate user by email without any validations */
  backdoorLogin?: Maybe<BackdoorLoginPayload>;
  createPractice?: Maybe<CreatePracticePayload>;
  /** Scenario: Practice with active services for Renewal */
  seedActiveServicesForRenewal?: Maybe<SeedActiveServicesForRenewalPayload>;
  seedPracticeWithPayments?: Maybe<SeedPracticeWithPaymentsPayload>;
  seedPracticeWithTfaUser?: Maybe<SeedPracticeWithTfaUserPayload>;
  /** A series of practices under different various payment control states */
  seedPracticesWithPaymentControlStates?: Maybe<SeedPracticesWithPaymentControlStatesPayload>;
  seedStandardPractice?: Maybe<SeedStandardPracticePayload>;
  /** This mutation triggers a aiTextGenerationSessionTextGenerated Subscription */
  triggerAiTextGenerated?: Maybe<TriggerAiTextGeneratedPayload>;
  /** This mutation triggers a paymentCollected Subscription but doesn't acknowledge the payment. */
  triggerPaymentCollected?: Maybe<TriggerPaymentCollectedPayload>;
  /** This mutation triggers a paymentDisbursed Subscription but doesn't acknowledge the payment. */
  triggerPaymentDisbursed?: Maybe<TriggerPaymentDisbursedPayload>;
  /** This mutation triggers a paymentStarted Subscription but doesn't acknowledge the payment. */
  triggerPaymentStarted?: Maybe<TriggerPaymentStartedPayload>;
  triggerProposalAccepted?: Maybe<TriggerProposalAcceptedPayload>;
};

export type MutationBackdoorLoginArgs = {
  input: BackdoorLoginInput;
};

export type MutationCreatePracticeArgs = {
  input: CreatePracticeInput;
};

export type MutationSeedActiveServicesForRenewalArgs = {
  input: SeedActiveServicesForRenewalInput;
};

export type MutationSeedPracticeWithPaymentsArgs = {
  input: SeedPracticeWithPaymentsInput;
};

export type MutationSeedPracticeWithTfaUserArgs = {
  input: SeedPracticeWithTfaUserInput;
};

export type MutationSeedPracticesWithPaymentControlStatesArgs = {
  input: SeedPracticesWithPaymentControlStatesInput;
};

export type MutationSeedStandardPracticeArgs = {
  input: SeedStandardPracticeInput;
};

export type MutationTriggerAiTextGeneratedArgs = {
  input: TriggerAiTextGeneratedInput;
};

export type MutationTriggerPaymentCollectedArgs = {
  input: TriggerPaymentCollectedInput;
};

export type MutationTriggerPaymentDisbursedArgs = {
  input: TriggerPaymentDisbursedInput;
};

export type MutationTriggerPaymentStartedArgs = {
  input: TriggerPaymentStartedInput;
};

export type MutationTriggerProposalAcceptedArgs = {
  input: TriggerProposalAcceptedInput;
};

export type Payment = {
  __typename: 'Payment';
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
};

export type Practice = {
  __typename: 'Practice';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  principal: User;
};

export type Proposal = {
  __typename: 'Proposal';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type Query = {
  __typename: 'Query';
  codeVersion: Scalars['String']['output'];
  currentUser?: Maybe<User>;
  environment: Scalars['String']['output'];
};

/** Autogenerated input type of SeedActiveServicesForRenewal */
export type SeedActiveServicesForRenewalInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  practiceId: Scalars['ID']['input'];
};

/** Autogenerated return type of SeedActiveServicesForRenewal. */
export type SeedActiveServicesForRenewalPayload = {
  __typename: 'SeedActiveServicesForRenewalPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  practice: Practice;
  principal: User;
};

/** Autogenerated input type of SeedPracticeWithPayments */
export type SeedPracticeWithPaymentsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Practice's country code. */
  countryCode?: InputMaybe<Scalars['String']['input']>;
  /** feature flag that would apply to the practice */
  featureFlags?: InputMaybe<Array<Scalars['String']['input']>>;
  /**
   * Pre-created payments with different traits. Available options: cancelled,
   * clawed_back, clawing_back, collected, collecting, collection_scheduled,
   * disbursed, disbursing, disbursing_next, refund_scheduled, refunding,
   * uncollected, with_approved_refund, with_authentication_required_collection,
   * with_completed_clawback, with_completed_collection, with_completed_deployment,
   * with_completed_disbursal, with_completed_refund, with_failed_clawback,
   * with_failed_collection, with_failed_disbursal, with_failed_refund,
   * with_lost_dispute, with_started_clawback, with_started_collection,
   * with_started_disbursal, with_started_dispute, with_started_refund,
   * with_won_dispute
   */
  paymentsTraits?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** Autogenerated return type of SeedPracticeWithPayments. */
export type SeedPracticeWithPaymentsPayload = {
  __typename: 'SeedPracticeWithPaymentsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  practice: Practice;
};

/** Autogenerated input type of SeedPracticeWithTfaUser */
export type SeedPracticeWithTfaUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  practiceName: Scalars['String']['input'];
  userEmail: Scalars['String']['input'];
};

/** Autogenerated return type of SeedPracticeWithTfaUser. */
export type SeedPracticeWithTfaUserPayload = {
  __typename: 'SeedPracticeWithTfaUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  practice: Practice;
  user: User;
};

/** Autogenerated input type of SeedPracticesWithPaymentControlStates */
export type SeedPracticesWithPaymentControlStatesInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of SeedPracticesWithPaymentControlStates. */
export type SeedPracticesWithPaymentControlStatesPayload = {
  __typename: 'SeedPracticesWithPaymentControlStatesPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  practices: Array<Practice>;
};

/** Autogenerated input type of SeedStandardPractice */
export type SeedStandardPracticeInput = {
  /**
   * Available options: archived, billed, billed_automatically, billed_manually,
   * billing_failed, estimate_quantity_rule, minimum_item, price_range_item,
   * search_indexed, skip_search_index, smart_billing_quantity_rule, unbilled,
   * unit_price, with_credit_card, with_engagement_billable_service
   */
  billingItemsTraits?: InputMaybe<Array<Scalars['String']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /**
   * Available options: acceptable, accepts_credit_card, accepts_direct_debit,
   * active, billable_today, billed_monthly, billed_weekly, completed, deleted,
   * draft, from_web_connector, hide_display_totals, invalid, lost,
   * old_accept_page, queued, requiring_payment_method, revoked, sent,
   * should_bill_continuously, show_service_prices, with_a_parent,
   * with_a_prorata_service, with_all_billing_types,
   * with_all_billing_types_and_standardized_pricing, with_bank_account, with_cc,
   * with_credit_card, with_embedded_document, with_gst_included,
   * with_invoiced_non_recurring_services, with_new_proposal_email_template,
   * with_oncompletion_service_and_deposit, with_payment_method_accepted,
   * with_payments_enabled, with_pending_collection, with_recurring_job,
   * with_scheduled_invoices, with_services, with_uninvoiced_boc_services,
   * with_uninvoiced_estimate_services, with_uninvoiced_hourly_estimate_services,
   * with_upfront_job, with_upfront_job_and_recurring_job, with_videos
   */
  cpeProposalsTraits?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Available options: gusto, qbo, xero, xpm, proconnect */
  integrations?: InputMaybe<Array<Scalars['String']['input']>>;
  practiceId: Scalars['ID']['input'];
  /**
   * Available options: accepted, accepts_credit_card, accepts_direct_debit,
   * approved, archived, awaiting_acceptance, change_requested, completed, draft,
   * lost, new, not_in_review, review_requested, search_indexed, sent, signed,
   * signed_externally_and_accepted, signed_internally,
   * signed_internally_and_accepted, skip_search_index, start_on_acceptance,
   * start_on_date, user_as_sender, with_accepted_client_services, with_brochure,
   * with_multiple_options, with_multiple_signatories, with_next_steps_message,
   * with_payment_method_bank_account, with_payment_method_credit_card,
   * with_recipient, with_signatory, with_videos, with_workflow
   */
  proposalsTraits?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** Autogenerated return type of SeedStandardPractice. */
export type SeedStandardPracticePayload = {
  __typename: 'SeedStandardPracticePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  practice: Practice;
  principal: User;
  proposals: Array<Engagement>;
};

export type Session = {
  __typename: 'Session';
  id: Scalars['ID']['output'];
  /** Latest generated text result */
  text?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of TriggerAiTextGenerated */
export type TriggerAiTextGeneratedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Generated text */
  generatedText: Scalars['String']['input'];
  /** ID (external_id) of the ai session */
  sessionId: Scalars['ID']['input'];
};

/** Autogenerated return type of TriggerAiTextGenerated. */
export type TriggerAiTextGeneratedPayload = {
  __typename: 'TriggerAiTextGeneratedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  session?: Maybe<Session>;
};

/** Autogenerated input type of TriggerPaymentCollected */
export type TriggerPaymentCollectedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** ID (slug) of the payment to trigger the subscription with */
  id: Scalars['ID']['input'];
  /** ID (slug) of the practice of the proposal */
  practiceId: Scalars['ID']['input'];
};

/** Autogenerated return type of TriggerPaymentCollected. */
export type TriggerPaymentCollectedPayload = {
  __typename: 'TriggerPaymentCollectedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  payment?: Maybe<Payment>;
};

/** Autogenerated input type of TriggerPaymentDisbursed */
export type TriggerPaymentDisbursedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** ID (slug) of the payment to trigger the subscription with */
  id: Scalars['ID']['input'];
  /** ID (slug) of the practice of the proposal */
  practiceId: Scalars['ID']['input'];
};

/** Autogenerated return type of TriggerPaymentDisbursed. */
export type TriggerPaymentDisbursedPayload = {
  __typename: 'TriggerPaymentDisbursedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  payment?: Maybe<Payment>;
};

/** Autogenerated input type of TriggerPaymentStarted */
export type TriggerPaymentStartedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** ID (slug) of the payment to trigger the subscription with */
  id: Scalars['ID']['input'];
  /** ID (slug) of the practice of the proposal */
  practiceId: Scalars['ID']['input'];
};

/** Autogenerated return type of TriggerPaymentStarted. */
export type TriggerPaymentStartedPayload = {
  __typename: 'TriggerPaymentStartedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  payment?: Maybe<Payment>;
};

/** Autogenerated input type of TriggerProposalAccepted */
export type TriggerProposalAcceptedInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** ID (slug) of the proposal to trigger the subscription with */
  id: Scalars['ID']['input'];
  /** ID (slug) of the practice of the proposal */
  practiceId: Scalars['ID']['input'];
};

/** Autogenerated return type of TriggerProposalAccepted. */
export type TriggerProposalAcceptedPayload = {
  __typename: 'TriggerProposalAcceptedPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  proposal?: Maybe<Proposal>;
};

export type User = {
  __typename: 'User';
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
};

export type CreatePracticeMutationVariables = Exact<{
  name: Scalars['String']['input'];
  subscriptionStatus?: InputMaybe<Scalars['String']['input']>;
}>;

export type CreatePracticeMutation = {
  __typename: 'Mutation';
  createPractice?: {
    __typename: 'CreatePracticePayload';
    practice: {
      __typename: 'Practice';
      id: string;
      name: string;
      principal: { __typename: 'User'; email: string };
    };
  };
};

export type SeedStandardPracticeMutationVariables = Exact<{
  practiceId: Scalars['ID']['input'];
  integrations?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >;
  proposalsTraits?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >;
}>;

export type SeedStandardPracticeMutation = {
  __typename: 'Mutation';
  seedStandardPractice?: {
    __typename: 'SeedStandardPracticePayload';
    practice: {
      __typename: 'Practice';
      id: string;
      name: string;
      principal: { __typename: 'User'; email: string };
    };
  };
};

export type SeedPracticeWithPaymentsMutationVariables = Exact<{
  [key: string]: never;
}>;

export type SeedPracticeWithPaymentsMutation = {
  __typename: 'Mutation';
  seedPracticeWithPayments?: {
    __typename: 'SeedPracticeWithPaymentsPayload';
    practice: {
      __typename: 'Practice';
      id: string;
      name: string;
      principal: { __typename: 'User'; email: string };
    };
  };
};
